online tool-- https://training.play-with-docker.com/beginner-linux/


To get all image list in current system:
docker image ls 

To get docker containers list with history:
docker container ls -a 

To get docker running containers list:
docker container ls 

To run any docker container (here debian linux os ):
Open command prompt and execute the following command. 
docker run -it debian 
**get the container
Give commands in current docker container as :
pwd
ls
exit ( to come out from container)(ctrl+d)

To get container list :  docker container ls 

To Stop the container :  docker container stop <id>

To remove container : 
docker container rm <id>
docker container ls 

To remove image :
docker image rm <id>
docker image ls

==========================

docker pull nginx:1.17.5 
docker image ls 
docker run --name my-nginx -p 8080:80 -d nginx
docker container ls 
docker-machine ip

Now open web browser and give url as :  http://<machine-ip>:8080 
(Defafult web page will come )

Now stop container , remove container and remove image also.

**custom way:
create a folder in local machine and under this make 2 files :
a. hello.html  b. Dockerfile

l

$cd   <folder location>
docker build -t simple-nginx .
docker image ls 
run our image by using command :
#docker run --rm -it -p 8085:80 simple-nginx

docker-machine ip
Now, open URLs
http://<ip>:8085/
http://<ip>:8085/hello.html



===============
MySql Container :

docker pull mysql/mysql-server:latest
docker images
docker run -p 3306:3306 -d --name=mysql1 mysql/mysql-server:latest
docker container ls -a
docker logs mysql1
[Entrypoint] GENERATED ROOT PASSWORD: %KS139Z*HiY@%nX9d5kVJ^W0?Z4@5J#G
docker exec -it mysql1 bash 
mysql -u root -p

alter user 'root'@'localhost' identified by 'root';
exit from shell and login again using root/root

show databases;
create database mydb;
use mydb;
show tables;

-- after complete task , to stop docker container :
check container id :
docker ps
--- get container id from list
docker stop <container id>
docker ps

===================

Spring Boot App run using Docker :
make a local folder , there we keep 2 files:
a. Jar for Spring Boot App   b. Dockerfile
FROM openjdk:8-jdk-alpine
ADD books-service.jar app.jar
ENTRYPOINT ["java","-jar", "/app.jar"]

go to that folder in docker env
cd <folder name>
Now build image : 
Build the docker image for the spring boot project
docker image build -t mybootapp .
docker images

Run the container as:
docker container run --name mybootapp --rm -it -p 8080:8080  mybootapp

============Open other terminal & Now check the rest services as:

OPen another terminal or docker toolbox terminal:
$docker-machine ip
192.168.99.100

$curl http://192.168.99.100:8080/getbooks

========== Docker Compose

**To run docker image for MySQL:

[root@ip-172-31-16-204 ec2-user]# docker run --name mysql-standalone -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mytestdb -d docker.io/mysql:8

[root@ip-172-31-16-204 ec2-user]# docker container ls

CONTAINER ID  IMAGE          COMMAND               CREATED        STATUS            PORTS  NAMES
4f2ac6c35488  docker.io/mysql/mysql-server:latest  /entrypoint.sh my...  8 seconds ago  Up 8 seconds ago         mysql-standalone

To Run the BASH for MYSQL:
[root@ip-172-31-16-204 ec2-user]# docker container exec -it 4f2ac6c35488  bash

bash-4.2# mysql -uroot -proot
mysql> show databases;

**mytestdb shows in list

mysql>
mysql> quit;
Bye
bash-4.2# exit


[root@ip-172-31-16-204 ec2-user]# docker container ls

CONTAINER ID  IMAGE        COMMAND               CREATED        STATUS            PORTS  NAMES
4f2ac6c35488  docker.io/mysql/mysql-server:latest  /entrypoint.sh my...  5 minutes ago  Up 5 minutes ago         mysql-standalone

[root@ip-172-31-16-204 ec2-user]# docker container stop 4f2ac6c35488

[root@ip-172-31-16-204 ec2-user]# docker container rm 4f2ac6c35488

[root@ip-172-31-16-204 ec2-user]# docker container ls

[root@ip-172-31-16-204 ec2-user]#

==================
Spring boot rest + mysql  run by docker compose:
==============================

We will be installing the docker compose as follows-

$ sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

Next, set the permissions to make the binary executable:

$ sudo chmod +x /usr/local/bin/docker-compose


Add it into docker group
$ sudo groupadd docker 
$ sudo usermod â€“aG docker centos
$ groups centos

-------------------------------------------------------------
Now again lets check the docker-compose version
$ docker-compose --version


Under current 'restsql' folder , make a new folder to store db script
[root@centos7 restsql]# mkdir dbscript
[root@centos7 restsql]# vi dbscript/db.sql 
use countrydb;
create table country (code varchar(10) not null primary key , name varchar(10));
insert into country values ('IN','India'),('US','United');

Esc :wq

Under the folder 'restsql' , make a file as docker-compose.yml as :

[root@centos7 restsql]# cat docker-compose.yml
version: "3"
services:
  rest-jdbc:
    image: rest-jdbc
    ports:
      - "8080:8080"
    networks:
      - country-mysql
    depends_on:
      - mysqldb
 
  mysqldb:
    image: docker.io/mysql:8
    networks:
      - country-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=countrydb
    volumes:
      - ./dbscript:/docker-entrypoint-initdb.d  

networks:
  country-mysql: 

Save it  Esc :wq

====

Build the docker image for the spring boot project [ if image is not there ]
docker image build -t rest-jdbc .
docker images



Now give command to run :  docker-compose up

2 applications are started... Open a new terminal , check container id.

Now start mysql  env :

[root@centos7 restsql]# docker container exec -it ee3054eed594 bash

#mysql -uroot -proot
mysql>
show databases;
use countrydb;
select * from country;
quit;

exit;


Open another terminal , use command as :
curl http://localhost:8080/getcountries    [ if not works ]

Or

docker-machine ip
curl http://<ip>:8080/getcountries


curl --header "Content-Type: application/json"   --request POST   --data '{"code":"UK","name":"Kingdom"}'  http://localhost:8080/addcountry

===========================================













